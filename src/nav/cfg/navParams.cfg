#! /usr/bin/env python

PACKAGE='nav'
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#       Name             Type      Reconfiguration level Description                   Default Min    Max
gen.add("gain_roll_p",   double_t, 0,                    "Proportional Roll Gain",     6,      -500,    500)
gen.add("gain_roll_i",   double_t, 0,                    "Integral Roll Gain",         0,      -500,    500)
gen.add("gain_roll_d",   double_t, 0,                    "Derivative Roll Gain",       0,      -500,    500)
gen.add("alpha_roll",    double_t, 0,                    "alpha for derivative",       0.5,      0,    1)
gen.add("min_int_roll",  double_t, 0,                    "Minimum Integrator Value",   0,     -10,      0)
gen.add("max_int_roll",  double_t, 0,                    "Maximum Integrator Value",   0,       0,     10)

gen.add("gain_pitch_p",  double_t, 0,                    "Proportional Pitch Gain",    6,      -500,    500)
gen.add("gain_pitch_i",  double_t, 0,                    "Integral Pitch Gain",        0,      -500,    500)
gen.add("gain_pitch_d",  double_t, 0,                    "Derivative Pitch Gain",      0,      -500,    500)
gen.add("alpha_pitch",    double_t, 0,                    "alpha for derivative",       0.5,      0,    1)
gen.add("min_int_pitch", double_t, 0,                    "Minimum Integrator Value",   0,     -100,      0)
gen.add("max_int_pitch", double_t, 0,                    "Maximum Integrator Value",   0,      0,      100)

gen.add("gain_yaw_p",    double_t, 0,                    "Proportional Yaw Gain",      .5,    -500,    500)
gen.add("gain_yaw_i",    double_t, 0,                    "Integral Yaw Gain",          0,     -500,    500)
gen.add("gain_yaw_d",    double_t, 0,                    "Derivative Yaw Gain",        0,    -5,    500)
gen.add("alpha_yaw", 	 double_t, 0,                    "alpha for derivative",       0.5,      0,    1)
gen.add("min_int_yaw",   double_t, 0,                    "Minimum Integrator Value",   -10,    -100,     0)
gen.add("max_int_yaw",   double_t, 0,                    "Maximum Integrator Value",   10,      0,      100)

gen.add("gain_depth_p",  double_t, 0,                    "Proportional Depth Gain",    1,      -500,    500)
gen.add("gain_depth_i",  double_t, 0,                    "Integral Depth Gain",        1,      -500,    500)
gen.add("gain_depth_d",  double_t, 0,                    "Derivative Depth Gain",      1,      -500,    500)
gen.add("alpha_depth",  double_t, 0,                    "alpha for derivative",       0.5,      0,    1)
gen.add("min_int_depth", double_t, 0,                    "Minimum Integrator Value",   0,     -100,      0)
gen.add("max_int_depth", double_t, 0,                    "Maximum Integrator Value",   0,      0,      100)

gen.add("gain_surge_p",  double_t, 0,                    "Proportional Surge Gain",    1,      -500,    500)
gen.add("gain_surge_i",  double_t, 0,                    "Integral Surge Gain",        0,      -500,    500)
gen.add("gain_surge_d",  double_t, 0,                    "Derivative Surge Gain",      0,      -500,    500)
gen.add("alpha_surge",   double_t, 0,                    "alpha for derivative",       0.5,      0,    1)
gen.add("min_int_surge", double_t, 0,                    "Minimum Integrator Value",   0,     -100,      0)
gen.add("max_int_surge", double_t, 0,                    "Maximum Integrator Value",   0,       0,     100)
gen.add("roll_upsidedown", bool_t, 0, "Flip the roll value if the Stingray is upsidedown", False);

exit(gen.generate(PACKAGE, "nav", "navParams"))
